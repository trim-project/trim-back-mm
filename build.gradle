plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

bootJar { enabled = false }
jar { enabled = true }

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

subprojects { // 모든 하위 모듈들에 이 설정을 적용합니다.
	group 'com'
	version '0.0.1-SNAPSHOT'
	sourceCompatibility = '17'

	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	// 관리하는 모듈에 공통 dependencies
	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testCompileOnly 'org.projectlombok:lombok'
		testAnnotationProcessor 'org.projectlombok:lombok'

		/* jackson */
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-validation'

	}

	test {
		useJUnitPlatform()
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// 📌 Root build.gradle

tasks.register("copyDomainConfig") {
	def sourceDir = file("$rootDir/config")
	def targetDirs = [
			file("$rootDir/Trim-Api/src/main/resources")
	]

	targetDirs.each { targetDir ->
		doLast {
			copy {
				from sourceDir
				include("application-domain.yml")
				into targetDir
			}
			println "✅ YAML files copied to: ${targetDir.absolutePath}"
		}
	}

	outputs.dirs(targetDirs) // Gradle에게 각 모듈의 리소스 폴더를 출력으로 설정
}

tasks.register("copyInfraConfig") {
	def sourceDir = file("$rootDir/config")
	def targetDirs = [
			file("$rootDir/Trim-Infra/src/main/resources")
	]

	targetDirs.each { targetDir ->
		doLast {
			copy {
				from sourceDir
				include("application-infra.yml")
				into targetDir
			}
			println "✅ YAML files copied to: ${targetDir.absolutePath}"
		}
	}

	outputs.dirs(targetDirs) // Gradle에게 각 모듈의 리소스 폴더를 출력으로 설정
}

